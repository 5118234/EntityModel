<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yizuan.Service.WebApi</name>
    </assembly>
    <members>
        <member name="T:Yizuan.Service.Api.WebApi.HttpResponseMessageExtend">
            <summary>
            基于HTTP协议的返回消息对象扩展
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpResponseMessageExtend.ToResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode)">
            <summary>
            生成一个标准返回对象
            </summary>
            <param name="request">请求对象</param>
            <returns>HttpResponseMessage对象</returns>
            <param name="statusCode">HTTP状态码</param>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpResponseMessageExtend.ToResponse(System.Net.Http.HttpRequestMessage,Yizuan.Service.Api.ApiResult,System.Net.HttpStatusCode)">
            <summary>
            生成一个标准返回对象
            </summary>
            <param name="request">请求对象</param>
            <param name="result">返回内容</param>
            <param name="statusCode">HTTP状态码</param>
            <returns>HttpResponseMessage对象</returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpResponseMessageExtend.ToResponse(System.Net.Http.HttpRequestMessage,Yizuan.Service.Api.IApiResult,System.Net.HttpStatusCode)">
            <summary>
            生成一个标准返回对象
            </summary>
            <param name="request">请求对象</param>
            <param name="result">返回内容</param>
            <param name="statusCode">HTTP状态码</param>
            <returns>HttpResponseMessage对象</returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpResponseMessageExtend.ToResponse``1(System.Net.Http.HttpRequestMessage,``0,System.Net.HttpStatusCode)">
            <summary>
            生成一个标准返回对象(没有返回值）
            </summary>
            <typeparam name="TResult">返回类型，基于ApiResult</typeparam>
            <param name="request">请求对象</param>
            <param name="result">返回内容</param>
            <param name="statusCode">HTTP状态码</param>
            <returns>HttpResponseMessage对象</returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpResponseMessageExtend.ToResponse``1(System.Net.Http.HttpRequestMessage,Yizuan.Service.Api.ApiResult{``0},System.Net.HttpStatusCode)">
            <summary>
            生成一个标准返回对象(返回一般数据)
            </summary>
            <typeparam name="TResult">返回类型，基于ApiResult</typeparam>
            <param name="request">请求对象</param>
            <param name="statusCode">HTTP状态码</param>
            <param name="result">返回内容</param>
            <returns>HttpResponseMessage对象</returns>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpResponseMessageExtend.ToResponse``1(System.Net.Http.HttpRequestMessage,Yizuan.Service.Api.IApiResult{``0},System.Net.HttpStatusCode)">
            <summary>
            生成一个标准返回对象(返回一般数据)
            </summary>
            <typeparam name="TResult">返回类型，基于ApiResult</typeparam>
            <param name="request">请求对象</param>
            <param name="statusCode">HTTP状态码</param>
            <param name="result">返回内容</param>
            <returns>HttpResponseMessage对象</returns>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpResponseMessageExtend.ToResponse``1(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IList{``0},System.Net.HttpStatusCode)">
            <summary>
            生成一个标准返回对象（返回数组）
            </summary>
            <typeparam name="TResult">返回类型，基于ApiResult</typeparam>
            <param name="request">请求对象</param>
            <param name="statusCode">HTTP状态码</param>
            <param name="result">返回内容</param>
            <returns>HttpResponseMessage对象</returns>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpResponseMessageExtend.ToResponse``1(System.Net.Http.HttpRequestMessage,Yizuan.Service.Api.ApiArrayResult{``0},System.Net.HttpStatusCode)">
            <summary>
            生成一个标准返回对象（返回数组）
            </summary>
            <typeparam name="TResult">返回类型，基于ApiResult</typeparam>
            <param name="request">请求对象</param>
            <param name="statusCode">HTTP状态码</param>
            <param name="result">返回内容</param>
            <returns>HttpResponseMessage对象</returns>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpResponseMessageExtend.ToResponse``1(System.Net.Http.HttpRequestMessage,Yizuan.Service.Api.ApiPageResult{``0},System.Net.HttpStatusCode)">
            <summary>
            生成一个标准返回对象（返回分页）
            </summary>
            <typeparam name="TResult">返回类型，基于ApiResult</typeparam>
            <param name="request">请求对象</param>
            <param name="statusCode">HTTP状态码</param>
            <param name="result">返回内容</param>
            <returns>HttpResponseMessage对象</returns>
            <returns></returns>
        </member>
        <member name="T:Yizuan.Service.Api.WebApi.ApiResponseMessage">
            <summary>
            API返回专用的ResponseMessage
            </summary>
        </member>
        <member name="F:Yizuan.Service.Api.WebApi.ApiResponseMessage.SuccessMessage">
            <summary>
            默认的成功消息
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApiResponseMessage.#ctor">
            <summary>
            默认构造（状态码为
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApiResponseMessage.#ctor(System.Net.HttpStatusCode)">
            <summary>
            状态构造
            </summary>
            <param name="statusCode">状态</param>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApiResponseMessage.#ctor(System.Net.HttpStatusCode,Yizuan.Service.Api.ApiResult)">
            <summary>
            状态构造
            </summary>
            <param name="statusCode">状态</param>
            <param name="result"></param>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApiResponseMessage.#ctor(System.Net.HttpStatusCode,Yizuan.Service.Api.IApiResult)">
            <summary>
            状态构造
            </summary>
            <param name="statusCode">状态</param>
            <param name="result"></param>
        </member>
        <member name="T:Yizuan.Service.Api.WebApi.ApiResponseMessage`1">
            <summary>
            API返回专用的ResponseMessage
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApiResponseMessage`1.#ctor">
            <summary>
            默认构造（状态码为
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApiResponseMessage`1.#ctor(System.Net.HttpStatusCode)">
            <summary>
            状态构造
            </summary>
            <param name="statusCode">状态</param>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApiResponseMessage`1.#ctor(`0,System.Net.HttpStatusCode)">
            <summary>
            状态构造
            </summary>
            <param name="result">数据</param>
            <param name="statusCode">状态</param>
        </member>
        <member name="T:Yizuan.Service.Api.WebApi.BearerHandler">
            <summary>
                身份检查器
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.BearerHandler.Yizuan#Service#Api#WebApi#IHttpSystemHandler#OnBegin(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
                开始时的处理
            </summary>
            <returns>如果返回内容不为空，直接返回,后续的处理不再继续</returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.BearerHandler.Yizuan#Service#Api#WebApi#IHttpSystemHandler#OnEnd(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Net.Http.HttpResponseMessage)">
            <summary>
                结束时的处理
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.BearerHandler.Check(System.Net.Http.HttpRequestMessage)">
            <summary>
                执行检查
            </summary>
            <returns>
                0:表示通过验证，可以继续
                1：令牌为空或不合格
                2：令牌是伪造的
            </returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.BearerHandler.CheckDeviceId(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
                检查设备标识
            </summary>
            <returns>
                0:表示通过验证，可以继续
                1：令牌为空
                2：令牌是伪造的
            </returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.BearerHandler.CreateApiContext(Yizuan.Service.Api.OAuth.ILoginUserInfo,System.String)">
            <summary>
                构造上下文
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.BearerHandler.RevertCallContext(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
                还原调用上下文
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.BearerHandler.CheckServiceKey(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
                检查旧标识
            </summary>
            <returns>
                0:表示通过验证，可以继续
                1：令牌为空
                2：令牌是伪造的
            </returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.BearerHandler.CheckAccessToken(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
                检查AccessToken
            </summary>
            <returns>
                0:表示通过验证，可以继续
                1：令牌为空
                2：令牌是伪造的
            </returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.BearerHandler.ExtractToken(System.Net.Http.HttpRequestMessage)">
            <summary>
                取请求头的身份验证令牌
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yizuan.Service.Api.WebApi.ApplicationHelper">
            <summary>
            WebApi应用辅助类
            </summary>
        </member>
        <member name="P:Yizuan.Service.Api.WebApi.ApplicationHelper.IsInitialize">
            <summary>
            是否已初始化
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApplicationHelper.Initialize">
            <summary>
            初始化，必须先调用
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApplicationHelper.RegistSystemHandler(Yizuan.Service.Api.WebApi.IHttpSystemHandler)">
            <summary>
            注册系统处理器
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApplicationHelper.OnApplicationStart">
            <summary>
            Application_Start时调用
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApplicationHelper.OnApplicationStartInner">
            <summary>
            Application_Start时调用(内部使用)
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApplicationHelper.Regist(System.Web.Http.HttpConfiguration)">
            <summary>
            注册
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApplicationHelper.RegistFilter(System.Web.Http.HttpConfiguration)">
            <summary>
            注册过滤器
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApplicationHelper.RegistFormatter">
            <summary>
            注册格式化器
            </summary>
        </member>
        <member name="T:Yizuan.Service.Api.WebApi.ApiAccessOption">
            <summary>
            API访问配置
            </summary>
        </member>
        <member name="F:Yizuan.Service.Api.WebApi.ApiAccessOption.None">
            <summary>
            不可访问
            </summary>
        </member>
        <member name="F:Yizuan.Service.Api.WebApi.ApiAccessOption.Public">
            <summary>
            公开访问
            </summary>
        </member>
        <member name="F:Yizuan.Service.Api.WebApi.ApiAccessOption.Internal">
            <summary>
            内部访问
            </summary>
        </member>
        <member name="F:Yizuan.Service.Api.WebApi.ApiAccessOption.Anymouse">
            <summary>
            游客
            </summary>
        </member>
        <member name="F:Yizuan.Service.Api.WebApi.ApiAccessOption.Customer">
            <summary>
            客户
            </summary>
        </member>
        <member name="F:Yizuan.Service.Api.WebApi.ApiAccessOption.Business">
            <summary>
            商家用户
            </summary>
        </member>
        <member name="F:Yizuan.Service.Api.WebApi.ApiAccessOption.Employe">
            <summary>
            内部员工
            </summary>
        </member>
        <member name="T:Yizuan.Service.Api.WebApi.ApiAccessOptionFilterAttribute">
            <summary>
            API配置过滤器
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApiAccessOptionFilterAttribute.#ctor(Yizuan.Service.Api.WebApi.ApiAccessOption)">
            <summary>
            构造
            </summary>
            <param name="option"></param>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.ApiAccessOptionFilterAttribute.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            动作运行前
            </summary>
            <param name="filterContext"></param>
        </member>
        <member name="T:Yizuan.Service.Api.WebApi.HttpHandler">
            <summary>
            Handler
            </summary>
        </member>
        <member name="F:Yizuan.Service.Api.WebApi.HttpHandler.Handlers">
            <summary>
            所有注册的系统处理对象
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            重载
            </summary>
            <param name="request"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpHandler.OnEnd(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)">
            <summary>
            结束处理
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="T:Yizuan.Service.Api.WebApi.HttpIoLogHandler">
            <summary>
                Http进站出站的日志记录
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpIoLogHandler.Yizuan#Service#Api#WebApi#IHttpSystemHandler#OnBegin(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
                开始时的处理
            </summary>
            <returns>如果返回内容不为空，直接返回,后续的处理不再继续</returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpIoLogHandler.Yizuan#Service#Api#WebApi#IHttpSystemHandler#OnEnd(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Net.Http.HttpResponseMessage)">
            <summary>
                结束时的处理
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpIoLogHandler.RecordRequestToCode(System.Net.Http.HttpRequestMessage)">
            <summary>
                请求注册为代码
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpIoLogHandler.FormatParams(System.String)">
            <summary>
                参数格式化
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.HttpIoLogHandler.ExtractToken(System.Net.Http.HttpRequestMessage)">
            <summary>
                取请求头的身份验证令牌
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yizuan.Service.Api.WebApi.WebApiCaller">
            <summary>
                内部服务调用代理
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.#ctor">
            <summary>
                构造
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.#ctor(System.String)">
            <summary>
                构造
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.#ctor(System.String,System.String)">
            <summary>
                构造
            </summary>
        </member>
        <member name="P:Yizuan.Service.Api.WebApi.WebApiCaller.Host">
            <summary>
                主机
            </summary>
        </member>
        <member name="F:Yizuan.Service.Api.WebApi.WebApiCaller._beare">
            <summary>
                身份头
            </summary>
        </member>
        <member name="P:Yizuan.Service.Api.WebApi.WebApiCaller.Bearer">
            <summary>
                身份头
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.FormatParams(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                参数格式化
            </summary>
            <param name="httpParams"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.ToUrl(System.String)">
            <summary>
                转为合理的API地址
            </summary>
            <param name="api"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Get``1(System.String)">
            <summary>
                通过Get调用
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="apiName"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                通过Get调用
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="apiName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Get``1(System.String,Yizuan.Service.Api.IApiArgument)">
            <summary>
                通过Get调用
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="apiName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Get``1(System.String,System.String)">
            <summary>
                通过Get调用
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="apiName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Post``1(System.String,Yizuan.Service.Api.IApiArgument)">
            <summary>
                通过Post调用
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="apiName"></param>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Post``1(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                通过Post调用
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="apiName"></param>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Post``1(System.String,System.String)">
            <summary>
                通过Post调用
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="apiName"></param>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.GetResult``1(System.Net.HttpWebRequest)">
            <summary>
                取返回值
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Get(System.String)">
            <summary>
                通过Get调用
            </summary>
            <param name="apiName"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Get(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                通过Get调用
            </summary>
            <param name="apiName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Get(System.String,Yizuan.Service.Api.IApiArgument)">
            <summary>
                通过Get调用
            </summary>
            <param name="apiName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Get(System.String,System.String)">
            <summary>
                通过Get调用
            </summary>
            <param name="apiName"></param>
            <param name="arguments"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Post(System.String,Yizuan.Service.Api.IApiArgument)">
            <summary>
                通过Post调用
            </summary>
            <param name="apiName"></param>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Post(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
                通过Post调用
            </summary>
            <param name="apiName"></param>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.Post(System.String,System.String)">
            <summary>
                通过Post调用
            </summary>
            <param name="apiName"></param>
            <param name="form"></param>
            <returns></returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.WebApiCaller.GetResult(System.Net.HttpWebRequest)">
            <summary>
                取返回值
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="T:Yizuan.Service.Api.WebApi.IHttpSystemHandler">
            <summary>
            系统的HTTP处理接口
            </summary>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.IHttpSystemHandler.OnBegin(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            开始时的处理
            </summary>
            <param name="cancellationToken"></param>
            <param name="request"></param>
            <returns>如果返回内容不为空，直接返回,后续的处理不再继续</returns>
        </member>
        <member name="M:Yizuan.Service.Api.WebApi.IHttpSystemHandler.OnEnd(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Net.Http.HttpResponseMessage)">
            <summary>
            结束时的处理
            </summary>
            <param name="cancellationToken"></param>
            <param name="request"></param>
            <param name="response"></param>
        </member>
        <member name="T:Yizuan2.Service.Api.WebApi.CorsHandler">
            <summary>
            跨域支持
            </summary>
        </member>
        <member name="M:Yizuan2.Service.Api.WebApi.CorsHandler.Yizuan#Service#Api#WebApi#IHttpSystemHandler#OnBegin(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
                开始时的处理
            </summary>
            <returns>如果返回内容不为空，直接返回,后续的处理不再继续</returns>
        </member>
        <member name="M:Yizuan2.Service.Api.WebApi.CorsHandler.Yizuan#Service#Api#WebApi#IHttpSystemHandler#OnEnd(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken,System.Net.Http.HttpResponseMessage)">
            <summary>
                结束时的处理
            </summary>
        </member>
    </members>
</doc>
